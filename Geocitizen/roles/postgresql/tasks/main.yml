---
- hosts: db-master
  become: yes
  gather_facts: no
  become_method: sudo

  tasks:
  - name: ensure apt cache is up to date
    apt: update_cache=yes
  - name: ensure packages are installed
    apt: name={{item}}
    with_items:
        - postgresql-contrib
        - postgresql
        - libpq-dev
        - python-psycopg2
        - postgresql-client
        - rsync


- hosts: db-master
  become: yes
  become_user: root
  gather_facts: yes
  become_method: sudo

  vars:
    dbname: ss_demo_1
    dbuser: postgres
    dbpassword: postgres
    pg_version: 9.5


  tasks:

  - name: Generate SSH keys
    command: echo "y" | ssh-keygen -q -t rsa -f /root/.ssh/id_rsa -C "" -N "" 

  - name: create route connection
    command: echo "1" | ssh-copy-id -i /root/.ssh/id_rsa.pub -o StrictHostKeyChecking=no peter@192.168.216.166


  - name: create pass postgres
    become: true
    become_user: postgres
    postgresql_user: 
      name: postgres 
      password: postgres
 
  - name: Configure postgres pg_hba
    template: src=pg_hba.conf dest=/etc/postgresql/{{pg_version}}/main/
    notify: restart postgresql

  - name: Configure postgres postgres.conf
    template: src=postgresql.conf dest=/etc/postgresql/{{pg_version}}/main/
    notify: restart postgresql


    #command: sudo -i PGPASSWORD=postgres -u postgres psql -d template1 -c "ALTER USER postgres WITH PASSWORD 'postgres';"

  - name: create pass rep
    become: yes
    become_user: postgres
    postgresql_user: 
      db: postgres
      state: present
      name: rep 
      password: replica
      encrypted: no
      role_attr_flags: LOGIN,REPLICATION

 
#    command: sudo -i PGPASSWORD=postgres -u postgres psql -d template1 -c "CREATE USER rep REPLICATION LOGIN CONNECTION LIMIT 1 ENCRYPTED PASSWORD 'replica';"

  - name: ensure database is created
    become: yes
    become_user: postgres
    postgresql_db: 
      name: ss_demo_1

  - name: ensure user has access to database
    become: yes
    become_user: postgres
    postgresql_user: 
      db: ss_demo_1
      name: postgres 
      priv: ALL
#  - name: ensure user does not have unnecessary privilege
#    command: echo "1" | sudo PGPASSWORD=postgres -u postgres psql -c 'GRANT ALL PRIVILEGES ON DATABASE "ss_demo_1" to postgres;'
    #postgresql_user: name={{dbuser}} role_attr_flags=NOSUPERUSER,NOCREATEDB
  
  #- name: ensure no other user can access the database
   # postgresql_privs: db={{dbname}} role=PUBLIC type=database priv=ALL state=absent

  handlers:
  - name: restart postgresql
    service: name=postgresql state=restarted


- hosts: db-slave
  become: yes
  become_user: root
  gather_facts: yes
  become_method: sudo
  tasks:
  - name: stop slave postgresql
    service: name=postgresql state=stopped

- hosts: db-master
  become: yes
  become_user: postgres
  gather_facts: no
#  become_method: sudo
  tasks:

  - name: Start backup
    shell: psql -c "select pg_start_backup('initial_backup');"
  
  - name: rsync 
    shell: echo -e "yes\n1\n" | rsync -cva --inplace --exclude=*pg_xlog* /var/lib/postgresql/9.5/main/ 192.168.216.160:/var/lib/postgresql/9.5/main/

  - name: Stop backup
    shell: psql -c "select pg_stop_backup();"  

#  - name: Copy script to local
#    template: src=rsync_db.sh dest=/usr/share/ mode=0755

#  - name: Run rsync_db
#    command: sh /usr/share/rsync_db.sh


  handlers:
  - name: restart postgresql
    service: name=postgresql state=restarted

- hosts: db-slave
  become: yes
  become_user: root
  gather_facts: yes
  become_method: sudo
  tasks:
  - name: start slave postgresql
    service: name=postgresql state=started

